#include <AFMotor.h>
#include <Servo.h>

// Motor instances
AF_DCMotor motor1(1);
AF_DCMotor motor2(2);
AF_DCMotor motor3(3);
AF_DCMotor motor4(4);

// Ultrasonic sensor
const int trigPin = 10;
const int echoPin = 11;
long duration;
int distance;

// Servo scanning
Servo myServo;
int angle = 15;
bool increasing = true;
unsigned long lastScanTime = 0;
const int scanInterval = 30;  // ms

char command;

void setup() {
  Serial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  myServo.attach(9); // Use safe pin
  motor1.setSpeed(200);
  motor2.setSpeed(200);
  motor3.setSpeed(200);
  motor4.setSpeed(200);
}

void loop() {
  // Handle Bluetooth command
  if (Serial.available()) {
    command = Serial.read();
    handleCommand(command);
  }

  // Non-blocking radar sweep
  if (millis() - lastScanTime > scanInterval) {
    scanAndSend(angle);
    lastScanTime = millis();

    if (increasing) {
      angle++;
      if (angle >= 165) increasing = false;
    } else {
      angle--;
      if (angle <= 15) increasing = true;
    }
  }
}

void scanAndSend(int a) {
  myServo.write(a);
  distance = calculateDistance();
  Serial.print(a);
  Serial.print(",");
  Serial.print(distance);
  Serial.print(".");
}

int calculateDistance() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  return duration * 0.034 / 2;
}

void handleCommand(char cmd) {
  switch (cmd) {
    case 'F': moveMotors(FORWARD, FORWARD); break;
    case 'B': moveMotors(BACKWARD, BACKWARD); break;
    case 'L': moveMotors(BACKWARD, FORWARD); break;
    case 'R': moveMotors(FORWARD, BACKWARD); break;
    case 'S': moveMotors(RELEASE, RELEASE); break;
  }
}

void moveMotors(uint8_t leftDir, uint8_t rightDir) {
  motor1.run(leftDir);
  motor2.run(leftDir);
  motor3.run(rightDir);
  motor4.run(rightDir);
}
